SOLID
	S : Single Responsibility Principle
	O : Open-Closed Principle
	L : Liskov Substitution Principle
	I : Interface Segregation Principle
	D : Dependency Invsersion Principle


	1) SRP : 
Principio de responsabilidad unica.
Cada Clase debe hacer una sola cosa.
La clase no debe tener mas de una responsabilidad.
Si la clase tiene multiples responsabilidades es dificil darle mantenimiento.

Este principio dice que la clase debe tener una razon para cambiar, solamente debe tener una responsabilidad.

Beneficios:
El codigo es menos complejo
Mas facil de leer entender y modificar
Mantenimiento facil
Mejor reutilizacion de la clase
La clase y los métodos son más compactos

Desventajas
El principio se aplica de forma subjetiva, no hay regla formal y estricta
En proyectos previamente creados puede ser dificil de aplicarlo
Es mejor aplicarlo desde el inicio
Puede llevar a la desorganizacion si no se aplica bien o se exagera.


	2) OCP
Open Closed Principle
Principio de Abierto Cerrado
Las clases y los metodos deben estar abiertos para extension pero cerrados para modificacion
Debemos de tratar de crear codigo que no necesite ser modificado cada que hay cambios en los requerimientos
Lo hacemos al proveer un mecanismos que permite a la clase extender sus comportamientos sin modificar a la clase
Es lo que debemos de tratar de lograr la mayor parte del tiempo

Beneficios:
Nos ayuda a reducir los bugs al disminuir la cantidad de cambios
Se reduce el test, pues al extender el comportamiento, solo se hace test sobre lo nuevo y no toda la clase.

Desventajas:
A veces no es posible implementarlo y hay que modificar la clase.
Lo mejor es planear OCP desde el inicio.


	3) Liskov
Liskov substitution principie	
Principio de sustitucion de Liskov
Este principio nos dice que los objetos de clases hijas deben de poder sustituir a los objetos de las clases padre sin ocaccionar problemas.
Ayuda al mantenimiento.
Mantenemos la funcionalidad y al mismo tiempo conservamos las clases derivada.

Ventajas
Ayuda al mantenimiento
Promueve la reutilizacion del codigo.

Desventajas
Es mejor colocarlo en la etapa de diseño.
Se debe manejar bien el uso de polimorfismo para usarlo apropiadamente.

	4) ISP
Interface Segregation Principle
Principio de Segregacion de Interfaz
Ningun cliente debe de ser forzado a depender de metodos que no usa.
Debemos de reducir el codigo a la implementacion mas pequeña
Las interfaces deben de tener solo las declaraciones necesarias.
Se usa si es necesario dividir las interfaces en varias.

Si usamos una interfaz para multiples propositos podemos tener clases que solo usen unos metodos y otros no
Las clases se vuelven mas faciles de implementar
El codigo se hace mas facil de entender y darle mantenimiento

Ventajas:
Interfaces mas pequeñas son mas sencillas de implementar
El mantenimiento es mas facil 
La lectura del codigo es mas facil.

Desventajas:
Si se exagera terminamos con una gran cantidad de interfaces.


	5) DIP
Dependency Inversion Principle
Principio de Invercion de dedpendencia
Vamos a tener modulos de alto nivel que pueden ser reutilizados y que no sean afectados por cambios en modulos de bajo nivel
Para lograrlo tenemos que adicionar abstracciones que desacoplen los de alto nivel de los de abajo

Los modulos de alto nivel de dependen de los de bajo nivel, pero ambos dependen de las abstracciones
Las abstracciones no deben de depender de los detalles, pero los detalles de las abstracciones.

Los modulos de bajo nivel contienen componentes que se centran mas en los detalles individuales de la aplicacion.
Son usados dentro de los modulos de alto nivel
Lo mas importante es que ambos modulos dependen de las abstacciones.

Ventajas
Reduce el numero de dependencias entre los modulos
Las clases no estan fuertemente acopladas con los elementos de bajo nivel
Aumenta la reutilizacion de codigo
Si se implementa correctamente aumenta la flexibilidad y estabilidad.

Desventaja
Es riesgoso aplicarlo a modulos que ya existen

